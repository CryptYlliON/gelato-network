{
  "language": "Solidity",
  "sources": {
    "contracts/actions/GelatoActionsStandard.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"./IGelatoAction.sol\";\n\n/// @title GelatoActionsStandard\n/// @dev find all the NatSpecs inside IGelatoAction\ncontract GelatoActionsStandard is IGelatoAction {\n\n    IGelatoCore internal gelatoCore;\n    bytes4 internal actionSelector;\n    uint256 internal actionConditionsOkGas;\n    uint256 internal actionGas;\n\n    event LogAction(address indexed user);\n\n    constructor() internal {\n        gelatoCore = IGelatoCore(0x3C64f059a17beCe12d5C43515AB67836c5857E26);\n    }\n\n    function getGelatoCore() external view returns(IGelatoCore) {return gelatoCore;}\n    function getActionSelector() external view returns(bytes4) {return actionSelector;}\n    function getActionConditionsOkGas() external view returns(uint256) {return actionConditionsOkGas;}\n    function getActionGas() external view returns(uint256) {return actionGas;}\n\n    function getActionGasTotal()\n        external\n        view\n        returns(uint256)\n    {\n        return actionConditionsOkGas + actionGas;\n    }\n\n    function actionConditionsOk(bytes calldata)  // _actionPayloadWithSelector\n        external\n        view\n        returns(bool)\n    {\n        this;  // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return true;\n    }\n\n    function getProxyOfUser(address payable _user)\n        external\n        view\n        returns(IGelatoUserProxy)\n    {\n        return _getProxyOfUser(_user);\n    }\n\n    function _getProxyOfUser(address _user)\n        internal\n        view\n        returns(IGelatoUserProxy)\n    {\n        return gelatoCore.getProxyOfUser(_user);\n    }\n}\n"
    },
    "contracts/actions/IGelatoAction.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"../gelato_core/interfaces/IGelatoCore.sol\";\nimport \"./GelatoActionsStandard.sol\";\n\n/// @title IGelatoAction - solidity interface of GelatoActionsStandard\n/// @notice all the APIs and events of GelatoActionsStandard\n/// @dev all the APIs are implemented inside GelatoActionsStandard\ninterface IGelatoAction {\n    event LogAction(address indexed user);\n\n    function getGelatoCore() external view returns(IGelatoCore);\n\n    function getActionSelector() external view returns(bytes4);\n\n    function getActionConditionsOkGas() external view returns(uint256);\n\n    function getActionGas() external view returns(uint256);\n\n    function getActionGasTotal() external view returns(uint256);\n\n    /**\n     * @notice Returns whether the action-specific conditions are fulfilled\n     * @dev if actions have specific conditions they should override and extend this fn\n     * @param _actionPayloadWithSelector: the actionPayload (with actionSelector)\n     * @return boolean true if specific action conditions are fulfilled, else false.\n     */\n    function actionConditionsOk(bytes calldata _actionPayloadWithSelector)\n        external\n        view\n        returns(bool);\n\n    function getProxyOfUser(address payable _user)\n        external\n        view\n        returns(IGelatoUserProxy);\n}"
    },
    "contracts/gelato_core/interfaces/IGelatoCore.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"../GelatoCoreEnums.sol\";\nimport \"./IGelatoUserProxy.sol\";\nimport \"../../triggers/IGelatoTrigger.sol\";\nimport \"../../actions/IGelatoAction.sol\";\n\n/// @title IGelatoCore - solidity interface of GelatoCore\n/// @notice canExecute API and minting, execution, cancellation of ExecutionClaims\n/// @dev all the APIs and events are implemented inside GelatoCore\ninterface IGelatoCore {\n\n    event LogExecutionClaimMinted(\n        address indexed selectedExecutor,\n        uint256 indexed executionClaimId,\n        IGelatoUserProxy indexed userProxy,\n        IGelatoTrigger _trigger,\n        bytes _triggerPayloadWithSelector,\n        uint256 triggerGas,\n        IGelatoAction _action,\n        bytes _actionPayloadWithSelector,\n        uint256 _actionGasTotal,\n        uint256 minExecutionGas,\n        uint256 executionClaimExpiryDate,\n        uint256 mintingDeposit\n    );\n\n    event LogCanExecuteFailed(\n        address payable indexed executor,\n        uint256 indexed executionClaimId,\n        GelatoCoreEnums.CanExecuteCheck indexed canExecuteResult\n    );\n\n    event LogClaimExecutedAndDeleted(\n        address payable indexed executor,\n        uint256 indexed executionClaimId,\n        IGelatoUserProxy userProxy,\n        GelatoCoreEnums.ExecutionResult indexed executionResult,\n        uint256 gasPriceUsed,\n        uint256 executionCostEstimate,\n        uint256 executorPayout\n    );\n\n    event LogExecutionClaimCancelled(\n        uint256 indexed executionClaimId,\n        IGelatoUserProxy indexed userProxy,\n        address indexed cancelor\n    );\n\n    /**\n     * @dev API for minting execution claims on gelatoCore\n     * @param _selectedExecutor: the registered executor to service this claim\n     * @param _trigger: the address of the trigger\n     * @param _triggerPayloadWithSelector: the encoded trigger params with function selector\n     * @param _action: the address of the action\n     * @param _actionPayloadWithSelector: the encoded action params with function selector\n     * @notice re-entrancy guard because accounting ops are present inside fn\n     * @notice msg.value is a refundable deposit - only a fee if executed\n     * @notice minting event split into two, due to stack too deep issue\n     */\n    function mintExecutionClaim(\n        address payable _selectedExecutor,\n        IGelatoTrigger _trigger,\n        bytes calldata _triggerPayloadWithSelector,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector\n    )\n        external\n        payable;\n\n    /**\n     * @dev the API for executors to check whether a claim is executable\n     * @param _executionClaimId executors get this from LogExecutionClaimMinted\n     * @param _userProxy executors get this from LogExecutionClaimMinted\n     * @param _trigger executors get this from LogTriggerActionMinted\n     * @param _triggerPayloadWithSelector executors get this from LogTriggerActionMinted\n     * @param _actionPayloadWithSelector executors get this from LogExecutionClaimMinted\n     * @param _executionMinGas executors get this from LogExecutionClaimMinted\n     * @param _executionClaimExpiryDate executors get this from LogExecutionClaimMinted\n     * @param _mintingDeposit executors get this from LogExecutionClaimMinted\n     * @return uint8 which converts to one of enum GelatoCoreEnums.CanExecuteCheck values\n     * @notice if return value == 6, the claim is executable\n     */\n    function canExecute(\n        uint256 _executionClaimId,\n        IGelatoUserProxy _userProxy,\n        IGelatoTrigger _trigger,\n        bytes calldata _triggerPayloadWithSelector,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGasTotal,\n        uint256 _actionConditionsOkGas,\n        uint256 _executionMinGas,\n        uint256 _executionClaimExpiryDate,\n        uint256 _mintingDeposit\n    )\n        external\n        view\n        returns (GelatoCoreEnums.CanExecuteCheck);\n\n\n    /**\n     * @dev the API executors call when they execute an executionClaim\n     * @param _executionClaimId executors get this from LogExecutionClaimMinted\n     * @param _userProxy executors get this from LogExecutionClaimMinted\n     * @param _trigger executors get this from LogTriggerActionMinted\n     * @param _triggerPayloadWithSelector executors get this from LogTriggerActionMinted\n     * @param _actionPayloadWithSelector executors get this from LogExecutionClaimMinted\n     * @param _action executors get this from LogTriggerActionMinted\n     * @param _executionMinGas executors get this from LogExecutionClaimMinted\n     * @param _executionClaimExpiryDate executors get this from LogExecutionClaimMinted\n     * @param _mintingDeposit executors get this from LogExecutionClaimMinted\n     * @return uint8 which converts to one of enum GelatoCoreEnums.ExecutionResult values\n     * @notice if return value == 0, the claim got executed\n     * @notice re-entrancy protection due to accounting operations and interactions\n     */\n    function execute(\n        uint256 _executionClaimId,\n        IGelatoUserProxy _userProxy,\n        IGelatoTrigger _trigger,\n        bytes calldata _triggerPayloadWithSelector,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGasTotal,\n        uint256 _executionMinGas,\n        uint256 _executionClaimExpiryDate,\n        uint256 _mintingDeposit\n    )\n        external\n        returns(GelatoCoreEnums.ExecutionResult executionResult);\n\n    /**\n     * @dev API for canceling executionClaims\n     * @param _selectedExecutor callers get this from LogExecutionClaimMinted\n     * @param _executionClaimId callers get this from LogExecutionClaimMinted\n     * @param _userProxy callers get this from LogExecutionClaimMinted\n     * @param _trigger callers get this from LogTriggerActionMinted\n     * @param _triggerPayloadWithSelector callers get this from LogTriggerActionMinted\n     * @param _actionPayloadWithSelector callers get this from LogExecutionClaimMinted\n     * @param _executionMinGas callers get this from LogExecutionClaimMinted\n     * @param _executionClaimExpiryDate callers get this from LogExecutionClaimMinted\n     * @param _mintingDeposit callers get this from LogExecutionClaimMinted\n     * @notice re-entrancy protection due to accounting operations and interactions\n     * @notice prior to executionClaim expiry, only owner of _userProxy can cancel\n        for a refund. Post executionClaim expiry, _selectedExecutor can also cancel,\n        for a reward.\n     * @notice .sendValue instead of .transfer due to IstanbulHF\n     */\n    function cancelExecutionClaim(\n        address payable _selectedExecutor,\n        uint256 _executionClaimId,\n        IGelatoUserProxy _userProxy,\n        IGelatoTrigger _trigger,\n        bytes calldata _triggerPayloadWithSelector,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGasTotal,\n        uint256 _executionMinGas,\n        uint256 _executionClaimExpiryDate,\n        uint256 _mintingDeposit\n    )\n        external;\n\n    /// @dev get the current executionClaimId\n    /// @return uint256 current executionClaim Id\n    function getCurrentExecutionClaimId() external view returns(uint256 currentId);\n\n    /// @dev api to read from the userProxyByExecutionClaimId state variable\n    /// @param _executionClaimId z\n    /// @return address of the userProxy behind _executionClaimId\n    function getUserProxyWithExecutionClaimId(uint256 _executionClaimId)\n        external\n        view\n        returns(IGelatoUserProxy);\n\n    function getUserWithExecutionClaimId(uint256 _executionClaimId)\n        external\n        view\n        returns(address payable);\n\n    /// @dev interface to read from the hashedExecutionClaims state variable\n    /// @param _executionClaimId z\n    /// @return the bytes32 hash of the executionClaim with _executionClaimId\n    function getHashedExecutionClaim(uint256 _executionClaimId)\n        external\n        view\n        returns(bytes32);\n\n\n    // ============= IGelatoUserProxyManager =======================\n    event LogCreateUserProxy(IGelatoUserProxy indexed userProxy, address indexed user);\n    /// @notice deploys gelato proxy for users that have no proxy yet\n    /// @dev This function should be called for users that have nothing deployed yet\n    /// @return address of the deployed GelatoUserProxy\n    function createUserProxy() external returns(IGelatoUserProxy);\n\n    // ______ State Read APIs __________________\n    function getUserCount() external view returns(uint256);\n    function getUserOfProxy(IGelatoUserProxy _proxy) external view returns(address payable);\n    function isUser(address _user) external view returns(bool);\n    function getProxyOfUser(address _user) external view returns(IGelatoUserProxy);\n    function isUserProxy(IGelatoUserProxy _userProxy) external view returns(bool);\n    function getUsers() external view returns(address payable[] memory);\n    function getUserProxies() external view returns(IGelatoUserProxy[] memory);\n    // =========================\n\n    // ================== IGelatoCoreAccounting ======================================\n    event LogRegisterExecutor(\n        address payable indexed executor,\n        uint256 executorPrice,\n        uint256 executorClaimLifespan\n    );\n\n    event LogDeregisterExecutor(address payable indexed executor);\n\n    event LogSetExecutorPrice(uint256 executorPrice, uint256 newExecutorPrice);\n\n    event LogSetExecutorClaimLifespan(\n        uint256 executorClaimLifespan,\n        uint256 newExecutorClaimLifespan\n    );\n\n    event LogWithdrawExecutorBalance(\n        address indexed executor,\n        uint256 withdrawAmount\n    );\n\n    event LogSetMinExecutionClaimLifespan(\n        uint256 minExecutionClaimLifespan,\n        uint256 newMinExecutionClaimLifespan\n    );\n\n    event LogSetGelatoCoreExecGasOverhead(\n        uint256 gelatoCoreExecGasOverhead,\n        uint256 _newGasOverhead\n    );\n\n    event LogSetUserProxyExecGasOverhead(\n        uint256 userProxyExecGasOverhead,\n        uint256 _newGasOverhead\n    );\n\n    /**\n     * @dev fn to register as an executorClaimLifespan\n     * @param _executorPrice the price factor the executor charges for its services\n     * @param _executorClaimLifespan the lifespan of claims minted for this executor\n     * @notice while executorPrice could be 0, executorClaimLifespan must be at least\n       what the core protocol defines as the minimum (e.g. 10 minutes).\n     * @notice NEW\n     */\n    function registerExecutor(uint256 _executorPrice, uint256 _executorClaimLifespan) external;\n\n    /**\n     * @dev fn to deregister as an executor\n     * @notice ideally this fn is called by all executors as soon as they stop\n       running their node/business. However, this behavior cannot be enforced.\n       Frontends/Minters have to monitor executors' uptime themselves, in order to\n       determine which listed executors are alive and have strong service guarantees.\n     */\n    function deregisterExecutor() external;\n\n    /**\n     * @dev fn for executors to configure their pricing of claims minted for them\n     * @param _newExecutorGasPrice the new price to be listed for the executor\n     * @notice param can be 0 for executors that operate pro bono - caution:\n        if executors set their price to 0 then they get nothing, not even gas refunds.\n     */\n    function setExecutorPrice(uint256 _newExecutorGasPrice) external;\n\n    /**\n     * @dev fn for executors to configure the lifespan of claims minted for them\n     * @param _newExecutorClaimLifespan the new lifespan to be listed for the executor\n     * @notice param cannot be 0 - use deregisterExecutor() to deregister\n     */\n    function setExecutorClaimLifespan(uint256 _newExecutorClaimLifespan) external;\n\n    /**\n     * @dev function for executors to withdraw their ETH on core\n     * @notice funds withdrawal => re-entrancy protection.\n     * @notice new: we use .sendValue instead of .transfer due to IstanbulHF\n     */\n    function withdrawExecutorBalance() external;\n\n    /**\n     * @dev setter for gelatoCore devs to impose a lower boundary on\n       executors' listed claim lifespans, to disallow bad claims\n     * @param _newMinExecutionClaimLifespan x\n     */\n    function setMinExecutionClaimLifespan(uint256 _newMinExecutionClaimLifespan) external;\n\n    /**\n     * @dev setter for GelatoCore devs to configure the protocol's executionGas calculations\n     * @param _newGasOverhead new calc for gelatoCore.execute overhead gas\n     * @notice important for _getMinExecutionGasRequirement and getMintingDepositPayable\n     */\n    function setGelatoCoreExecGasOverhead(uint256 _newGasOverhead) external;\n\n    /**\n     * @dev setter for GelatoCore devs to configure the protocol's executionGas calculations\n     * @param _newGasOverhead new calc for userProxy.execute overhead gas\n     * @notice important for _getMinExecutionGasRequirement and getMintingDepositPayable\n     */\n    function setUserProxyExecGasOverhead(uint256 _newGasOverhead) external;\n\n    /// @dev get the gelato-wide minimum executionClaim lifespan\n    /// @return the minimum executionClaim lifespan for all executors\n    function getMinExecutionClaimLifespan() external view returns(uint256);\n\n    /// @dev get an executor's price\n    /// @param _executor x\n    /// @return uint256 executor's price factor\n    function getExecutorPrice(address _executor) external view returns(uint256);\n\n    /// @dev get an executor's executionClaim lifespan\n    /// @param _executor x\n    /// @return uint256 executor's executionClaim lifespan\n    function getExecutorClaimLifespan(address _executor) external view returns(uint256);\n\n    /// @dev get the gelato-internal wei balance of an executor\n    /// @param _executor z\n    /// @return uint256 wei amount of _executor's gelato-internal deposit\n    function getExecutorBalance(address _executor) external view returns(uint256);\n\n    /// @dev getter for gelatoCoreExecGasOverhead state variable\n    /// @return uint256 gelatoCoreExecGasOverhead\n    function getGelatoCoreExecGasOverhead() external view returns(uint256);\n\n    /// @dev getter for userProxyExecGasOverhead state variable\n    /// @return uint256 userProxyExecGasOverhead\n    function getUserProxyExecGasOverhead() external view returns(uint256);\n\n    /// @dev getter for internalExecutionGas state variable\n    /// @return uint256 internalExecutionGas\n    function getTotalExecutionGasOverhead() external view returns(uint256);\n\n    /**\n     * @dev get the deposit payable for minting on gelatoCore\n     * @param _action the action contract to be executed\n     * @param _selectedExecutor the executor that should call the action\n     * @return amount of wei that needs to be deposited inside gelato for minting\n     * @notice minters (e.g. frontends) should use this API to get the msg.value\n       payable to GelatoCore's mintExecutionClaim function.\n     */\n    function getMintingDepositPayable(address _selectedExecutor, IGelatoAction _action)\n        external\n        view\n        returns(uint256 mintingDepositPayable);\n\n    /// @dev calculates gas requirements based off _actionGasTotal\n    /// @param _triggerGas the gas forwared to trigger.staticcall inside gelatoCore.execute\n    /// @param _actionGasTotal the gas forwarded with the action call\n    /// @return the minimum gas required for calls to gelatoCore.execute()\n    function getMinExecutionGas(uint256 _triggerGas, uint256 _actionGasTotal)\n        external\n        view\n        returns(uint256);\n\n\n    // ==================== GAS TESTING ==============================================\n    // ============= GELATO_GAS_TEST_USER_PROXY_MANAGER ==============\n    function createGasTestUserProxy() external returns(address gasTestUserProxy);\n\n    function getUserOfGasTestProxy(address _gasTestProxy)\n        external\n        view\n        returns(address);\n\n    function getGasTestProxyOfUser(address _user)\n        external\n        view\n        returns(address);\n\n    // ============= GELATO_GAS_TESTING_FNs ==============\n    function revertLogGasTriggerCheck(\n        IGelatoTrigger _trigger,\n        bytes calldata _triggerPayloadWithSelector,\n        uint256 _triggerGas\n    )\n        external\n        view\n        returns(uint256);\n\n    function revertLogGasActionConditionsCheck(\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionConditionsOkGas\n    )\n        external\n        view\n        returns(uint256);\n\n    function revertLogGasCanExecute(\n        uint256 _executionClaimId,\n        IGelatoUserProxy _userProxy,\n        IGelatoTrigger _trigger,\n        bytes calldata _triggerPayloadWithSelector,\n        uint256 _triggerGas,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGasTotal,\n        uint256 _actionConditionsOkGas,\n        uint256 _minExecutionGas,\n        uint256 _executionClaimExpiryDate,\n        uint256 _mintingDeposit\n    )\n        external\n        view\n        returns(uint256);\n\n    function revertLogGasActionViaGasTestUserProxy(\n        IGelatoUserProxy _gasTestUserProxy,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGas\n    )\n        external\n        returns(uint256);\n\n    function revertLogGasTestUserProxyExecute(\n        IGelatoUserProxy _userProxy,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGas\n    )\n        external\n        returns(uint256);\n\n    function revertLogGasExecute(\n        uint256 _executionClaimId,\n        IGelatoUserProxy _userProxy,\n        IGelatoTrigger _trigger,\n        bytes calldata _triggerPayloadWithSelector,\n        uint256 _triggerGas,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGasTotal,\n        uint256 _minExecutionGas,\n        uint256 _executionClaimExpiryDate,\n        uint256 _mintingDeposit\n    )\n        external\n        returns(uint256);\n}"
    },
    "contracts/gelato_core/GelatoCoreEnums.sol": {
      "content": "pragma solidity ^0.5.13;\n\ncontract GelatoCoreEnums {\n    constructor() internal {}\n\n    enum ExecutionResult { Success, Failure, CanExecuteFailed }\n\n    enum TriggerCheck { Reverted, NotFired, Fired }\n\n    enum ActionConditionsCheck { Reverted, NotOk, Ok }\n\n    enum CanExecuteCheck {\n        WrongCalldataOrAlreadyDeleted,  // also returns if a not-selected executor calls fn\n        NonExistantExecutionClaim,\n        ExecutionClaimExpired,\n        TriggerNotFired,\n        TriggerReverted,\n        ActionConditionsNotOk,\n        ActionReverted,\n        Executable\n    }\n}"
    },
    "contracts/gelato_core/interfaces/IGelatoUserProxy.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"../../actions/IGelatoAction.sol\";\n\n/// @title IGelatoUserProxy - solidity interface of GelatoTriggersStandard\n/// @notice GelatoUserProxy.execute() API called by gelatoCore during .execute()\n/// @dev all the APIs are implemented inside GelatoUserProxy\ninterface IGelatoUserProxy {\n    function executeCall(\n        address _action,\n        bytes calldata _actionPayloadWithSelector\n    )\n        external\n        payable\n        returns(bool success, bytes memory returndata);\n\n    function executeDelegatecall(\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGas\n    )\n        external\n        payable\n        returns(bool success, bytes memory returndata);\n\n    function getUser() external view returns(address payable);\n\n    function getGelatoCore() external view returns(address payable);\n}"
    },
    "contracts/triggers/IGelatoTrigger.sol": {
      "content": "pragma solidity ^0.5.13;\n\n/// @title IGelatoTrigger - solidity interface of GelatoTriggersStandard\n/// @notice all the APIs of GelatoTriggersStandard\n/// @dev all the APIs are implemented inside GelatoTriggersStandard\ninterface IGelatoTrigger {\n    function getTriggerSelector() external view returns(bytes4);\n    function getTriggerGas() external view returns(uint256);\n}"
    },
    "contracts/actions/kyber_actions/ActionKyberTrade.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"../GelatoActionsStandard.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../../helpers/SplitFunctionSelector.sol\";\nimport \"../../dapp_interfaces/kyber_interfaces/IKyber.sol\";\n\ncontract ActionKyberTrade is GelatoActionsStandard, SplitFunctionSelector {\n    using SafeERC20 for IERC20;\n\n    constructor() public {\n        actionSelector = this.action.selector;\n        actionConditionsOkGas = 50000;\n        actionGas = 700000;\n    }\n\n    event LogAction(\n        address indexed user,\n        address indexed src,\n        uint256 srcAmt,\n        address dest,\n        uint256 destAmt,\n        uint256 minConversionRate,\n        address feeSharingParticipant\n    );\n\n    function action(\n        // Standard Action Params\n        address _user,\n        // Specific Action Params\n        address _src,\n        uint256 _srcAmt,\n        address _dest,\n        uint256 _minConversionRate\n    )\n        external\n        returns (uint256 destAmt)\n    {\n        // !!!!!!!!! ROPSTEN !!!!!!\n        address kyberAddress = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n        {\n            IERC20 srcERC20 = IERC20(_src);\n            srcERC20.safeTransferFrom(_user, address(this), _srcAmt);\n            srcERC20.safeIncreaseAllowance(kyberAddress, _srcAmt);\n        }\n        destAmt = IKyber(kyberAddress).trade(\n            _src,\n            _srcAmt,\n            _dest,\n            _user,\n            2**255,\n            _minConversionRate,\n            address(0)  // fee-sharing\n        );\n        emit LogAction(\n            _user,\n            _src,\n            _srcAmt,\n            _dest,\n            destAmt,\n            _minConversionRate,\n            address(0)  // fee-sharing\n        );\n    }\n\n    function actionConditionsOk(bytes calldata _actionPayloadWithSelector)\n        external\n        view\n        returns(bool)\n    {\n        return _actionConditionsOk(_actionPayloadWithSelector);\n    }\n\n    function _actionConditionsOk(bytes memory _actionPayloadWithSelector)\n        internal\n        view\n        returns(bool)\n    {\n        (bytes4 functionSelector, bytes memory payload) = SplitFunctionSelector.split(\n            _actionPayloadWithSelector\n        );\n        (address _user, address _src, uint256 _srcAmt, , ) = abi.decode(\n            payload,\n            (address, address, uint256, address,uint256)\n        );\n        IERC20 srcERC20 = IERC20(_src);\n        uint256 srcUserBalance = srcERC20.balanceOf(_user);\n        uint256 srcUserProxyAllowance = srcERC20.allowance(\n            _user,\n            address(_getProxyOfUser(_user))\n        );\n        return (\n            functionSelector == actionSelector &&\n            srcUserBalance >= _srcAmt &&\n            _srcAmt <= srcUserProxyAllowance\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol": {
      "content": "pragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"
    },
    "contracts/helpers/SplitFunctionSelector.sol": {
      "content": "pragma solidity ^0.5.13;\n\ncontract SplitFunctionSelector {\n    // This contract should not be deployed\n    constructor() internal {}\n\n    function split(bytes memory _payloadWithSelector)\n        public\n        pure\n        returns(bytes4 functionSelector, bytes memory payloadWithoutSelector)\n    {\n        assembly {\n            // first 32bytes=0x20 stores length of bytes array - we take first 4 bytes\n            functionSelector := mload(add(0x20, _payloadWithSelector))\n            // mstore(p, v) => mem[p…(p+32)) := v\n            mstore(\n                add(_payloadWithSelector, 4),  // p shifted by 4 bytes\n                sub(mload(_payloadWithSelector), 4)  // v (length of payload - 4)\n            )\n            payloadWithoutSelector := add(_payloadWithSelector, 4)\n        }\n    }\n}\n"
    },
    "contracts/dapp_interfaces/kyber_interfaces/IKyber.sol": {
      "content": "pragma solidity ^0.5.13;\n\ninterface IKyber\n{\n\n    /**\n     * @dev Makes a trade between src and dest token and send dest tokens to destAddress\n     * @param src source ERC20 token contract address\n     * @param srcAmount source ERC20 token amount in its token decimals\n     * @param dest destination ERC20 token contract address\n     * @param destAddress recipient address for destination ERC20 token\n     * @param maxDestAmount limit on the amount of destination tokens\n     * @param minConversionRate minimum conversion rate; trade is canceled if actual rate is lower\n     * @param walletId wallet address to send part of the fees to\n     * @return Amount of actual destination tokens\n     * @notice srcAmount | maxDestAmount These amounts should be in the source and\n         destination token decimals respectively. For example, if the user wants to swap\n         from / to 10 POWR,which has 6 decimals, it would be 10 * (10 ** 6) = 10000000\n     * @notice maxDestAmount should not be 0. Set it to an arbitarily large amount\n         if you want all source tokens to be converted.\n     * @notice minConversionRate: This rate is independent of the source and\n         destination token decimals. To calculate this rate, take yourRate * 10**18.\n         For example, even though ZIL has 12 token decimals, if we want the minimum\n         conversion rate to be 1 ZIL = 0.00017 ETH, then\n         minConversionRate = 0.00017 * (10 ** 18).\n     * @notice walletId: If you are part of our fee sharing program, this will be\n         your registered wallet address. Set it as 0 if you are not a participant.\n     * @notice Since ETH is not an ERC20 token, we use\n        0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee as a proxy address to represent it.\n     * @notice If src is ETH, then you also need to send ether along with your call.\n     * @notice There is a minimum trading value of 1000 wei tokens.\n        Anything fewer is considered as 0.\n     */\n    function trade(address src,\n                   uint256 srcAmount,\n                   address dest,\n                   address destAddress,\n                   uint256 maxDestAmount,\n                   uint256 minConversionRate,\n                   address walletId\n    )\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @dev Get the expected exchange rate.\n     * @param src source ERC20 token contract address\n     * @param dest destination ERC20 token contract address\n     * @param srcQty wei amount of source ERC20 token\n     * @return The expected exchange rate and slippage rate.\n     * @notice Returned values are in precision values (10**18)\n        To understand what this rate means, divide the obtained value by 10**18\n        (tA, tB,)\n     */\n    function getExpectedRate(address src,\n                             address dest,\n                             uint256 srcQty\n    )\n        external\n        view\n        returns (uint256, uint256);\n}\n"
    },
    "contracts/actions/multi_mint/time_trigger/ActionMultiMintForTimeTrigger.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"../../GelatoActionsStandard.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\nimport \"../../../triggers/IGelatoTrigger.sol\";\n\ncontract ActionMultiMintForTimeTrigger is GelatoActionsStandard {\n    using SafeMath for uint256;\n\n    constructor() public {\n        actionSelector = this.action.selector;\n        actionConditionsOkGas = 30000;\n        actionGas = 1000000;\n    }\n\n    function action(\n        // gelatoCore.mintExecutionClaim params\n        address payable _selectedExecutor,\n        IGelatoTrigger _timeTrigger,\n        uint256 _startTime,  // will be encoded here\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        // MultiMintTimeBased params\n        uint256 _intervalSpan,\n        uint256 _numberOfMints\n    )\n        external\n        payable\n    {\n        IGelatoCore gelatoCore = IGelatoCore(0x8AB2E2C1Da789E960C1ac400e5500eC4C61aEac8);\n        uint256 mintingDepositPerMint = gelatoCore.getMintingDepositPayable(\n            _selectedExecutor,\n            _action\n        );\n        require(msg.value == mintingDepositPerMint.mul(_numberOfMints),\n            \"MultiMintTimeBased.multiMint: incorrect msg.value\"\n        );\n        for (uint256 i = 0; i < _numberOfMints; i++) {\n            uint256 timestamp = _startTime.add(_intervalSpan.mul(i));\n            bytes memory triggerPayloadWithSelector = abi.encodeWithSelector(\n                _timeTrigger.getTriggerSelector(),\n                timestamp\n            );\n            gelatoCore.mintExecutionClaim.value(mintingDepositPerMint)(\n                _selectedExecutor,\n                _timeTrigger,\n                triggerPayloadWithSelector,\n                _action,\n                _actionPayloadWithSelector\n            );\n        }\n    }\n}"
    },
    "contracts/gelato_core/gas_tests/GelatoGasTestUserProxy.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"../GelatoUserProxy.sol\";\n\ncontract GelatoGasTestUserProxy is GelatoUserProxy {\n\n    constructor(address payable _user) public GelatoUserProxy(_user) {}\n\n    function executeDelegatecall(\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGas\n    )\n        external\n        payable\n        auth\n        noZeroAddress(address(_action))\n        returns(bool success, bytes memory returndata)\n    {\n        uint256 startGas = gasleft();\n        (success, returndata) = address(_action).delegatecall.gas(_actionGas)(\n            _actionPayloadWithSelector\n        );\n        if (success) revert(string(abi.encodePacked(startGas - gasleft())));\n        revert(\"GasTestUserProxy.executeDelegatecall: Action reverted or wrong arguments supplied\");\n    }\n}"
    },
    "contracts/gelato_core/GelatoUserProxy.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"./interfaces/IGelatoUserProxy.sol\";\nimport \"../actions/GelatoActionsStandard.sol\";\n\n/// @title GelatoUserProxy\n/// @dev find all NatSpecs inside IGelatoUserProxy\ncontract GelatoUserProxy is IGelatoUserProxy {\n    address payable internal user;\n    address payable internal gelatoCore;\n\n    constructor(address payable _user)\n        public\n        noZeroAddress(_user)\n    {\n        user = _user;\n        gelatoCore = msg.sender;\n    }\n\n    modifier onlyUser() {\n        require(\n            msg.sender == user,\n            \"GelatoUserProxy.onlyUser: failed\"\n        );\n        _;\n    }\n\n    modifier auth() {\n        require(\n            msg.sender == user || msg.sender == gelatoCore,\n            \"GelatoUserProxy.auth: failed\"\n        );\n        _;\n    }\n\n    modifier noZeroAddress(address _) {\n        require(\n            _ != address(0),\n            \"GelatoUserProxy.noZeroAddress\"\n        );\n        _;\n    }\n\n    function executeCall(\n        address _action,\n        bytes calldata _actionPayloadWithSelector\n    )\n        external\n        payable\n        onlyUser\n        noZeroAddress(_action)\n        returns(bool success, bytes memory returndata)\n    {\n        (success, returndata) = _action.call(_actionPayloadWithSelector);\n        ///@dev we should delete require later - leave it for testing action executionClaimIds\n        require(success, \"GelatoUserProxy.executeCall(): _action.call failed\");\n    }\n\n    function executeDelegatecall(\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGas\n    )\n        external\n        payable\n        auth\n        noZeroAddress(address(_action))\n        returns(bool success, bytes memory returndata)\n    {\n        (success, returndata) = address(_action).delegatecall.gas(_actionGas)(\n            _actionPayloadWithSelector\n        );\n        ///@dev we should delete require later - leave it for testing action executionClaimIds\n        require(success, \"GelatoUserProxy.executeDelegatecall(): _action.delegatecall failed\");\n    }\n\n    function getUser() external view returns(address payable) {return user;}\n\n    function getGelatoCore() external view returns(address payable) {return gelatoCore;}\n}"
    },
    "contracts/gelato_core/gas_tests/GelatoGasTestUserProxyManager.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"../interfaces/IGelatoGasTestUserProxyManager.sol\";\nimport \"./GelatoGasTestUserProxy.sol\";\n\ncontract GelatoGasTestUserProxyManager is IGelatoGasTestUserProxyManager {\n    // non-deploy base contract\n    constructor() internal {}\n\n    mapping(address => address) internal userToGasTestProxy;\n    mapping(address => address) internal gasTestProxyToUser;\n\n    modifier gasTestProxyCheck(address _) {\n        require(_isGasTestProxy(_), \"GelatoGasTestUserProxyManager.isGasTestProxy\");\n        _;\n    }\n\n    function createGasTestUserProxy()\n        external\n        returns(address gasTestUserProxy)\n    {\n        gasTestUserProxy = address(new GelatoGasTestUserProxy(msg.sender));\n        userToGasTestProxy[msg.sender] = gasTestUserProxy;\n        gasTestProxyToUser[gasTestUserProxy] = msg.sender;\n    }\n\n    function getUserOfGasTestProxy(address _gasTestProxy)\n        external\n        view\n        returns(address)\n    {\n        return gasTestProxyToUser[_gasTestProxy];\n    }\n\n    function getGasTestProxyOfUser(address _user)\n        external\n        view\n        returns(address)\n    {\n        return userToGasTestProxy[_user];\n    }\n\n    function _isGasTestProxy(address _) private view returns(bool) {\n        return gasTestProxyToUser[_] != address(0);\n    }\n}"
    },
    "contracts/gelato_core/interfaces/IGelatoGasTestUserProxyManager.sol": {
      "content": "pragma solidity ^0.5.13;\n\n\ninterface IGelatoGasTestUserProxyManager {\n\n    function createGasTestUserProxy() external returns(address gasTestUserProxy);\n\n    function getUserOfGasTestProxy(address _gasTestProxy)\n        external\n        view\n        returns(address);\n\n    function getGasTestProxyOfUser(address _user)\n        external\n        view\n        returns(address);\n}"
    },
    "contracts/gelato_core/GelatoCore.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"./interfaces/IGelatoCore.sol\";\nimport \"./GelatoUserProxyManager.sol\";\nimport \"./GelatoCoreAccounting.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/drafts/Counters.sol\";\n\n/// @title GelatoCore\n/// @notice Execution Claim: minting, checking, execution, and cancellation\n/// @dev Find all NatSpecs inside IGelatoCore\ncontract GelatoCore is IGelatoCore, GelatoUserProxyManager, GelatoCoreAccounting {\n\n    // Library for unique ExecutionClaimIds\n    using Counters for Counters.Counter;\n    using Address for address payable;  /// for oz's sendValue method\n\n    // ================  STATE VARIABLES ======================================\n    Counters.Counter internal executionClaimIds;\n    // executionClaimId => userProxyByExecutionClaimId\n    mapping(uint256 => IGelatoUserProxy) internal userProxyByExecutionClaimId;\n    // executionClaimId => bytes32 executionClaimHash\n    mapping(uint256 => bytes32) internal hashedExecutionClaims;\n\n    // ================  MINTING ==============================================\n    function mintExecutionClaim(\n        address payable _selectedExecutor,\n        IGelatoTrigger _trigger,\n        bytes calldata _triggerPayloadWithSelector,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector\n    )\n        external\n        payable\n        onlyRegisteredExecutors(_selectedExecutor)\n    {\n        // ______ Authenticate msg.sender is proxied user or a proxy _______\n        IGelatoUserProxy userProxy;\n        if (_isUser(msg.sender)) userProxy = userToProxy[msg.sender];\n        else if (_isUserProxy(msg.sender)) userProxy = IGelatoUserProxy(msg.sender);\n        else revert(\"GelatoCore.mintExecutionClaim: msg.sender is not proxied\");\n        // =============\n        // ______ Charge Minting Deposit _______________________________________\n        uint256 triggerGas = _trigger.getTriggerGas();\n        require(triggerGas != 0, \"GelatoCore.mintExecutionClaim: 0 triggerGas\");\n        uint256 actionGasTotal = _action.getActionGasTotal();\n        require(actionGasTotal != 0, \"GelatoCore.mintExecutionClaim: 0 actionGasTotal\");\n        uint256 minExecutionGas = _getMinExecutionGas(triggerGas, actionGasTotal);\n        require(\n            msg.value == minExecutionGas.mul(executorPrice[_selectedExecutor]),\n            \"GelatoCore.mintExecutionClaim: msg.value failed\"\n        );\n        // =============\n        // ______ Mint new executionClaim ______________________________________\n        Counters.increment(executionClaimIds);\n        uint256 executionClaimId = executionClaimIds.current();\n        userProxyByExecutionClaimId[executionClaimId] = userProxy;\n        // =============\n        // ______ ExecutionClaim Hashing ______________________________________\n        uint256 executionClaimExpiryDate = now.add(executorClaimLifespan[_selectedExecutor]);\n        {\n            /// @notice Include executionClaimId to avoid hash collisions\n            bytes32 executionClaimHash = keccak256(\n                abi.encodePacked(\n                    _selectedExecutor,\n                    executionClaimId,\n                    userProxy,\n                    _trigger,\n                    _triggerPayloadWithSelector,\n                    triggerGas,\n                    _action,\n                    _actionPayloadWithSelector,\n                    actionGasTotal,\n                    minExecutionGas,\n                    executionClaimExpiryDate,\n                    msg.value\n                )\n            );\n            hashedExecutionClaims[executionClaimId] = executionClaimHash;\n        }\n        // =============\n        emit LogExecutionClaimMinted(\n            _selectedExecutor,\n            executionClaimId,\n            userProxy,\n            _trigger,\n            _triggerPayloadWithSelector,\n            triggerGas,\n            _action,\n            _actionPayloadWithSelector,\n            actionGasTotal,\n            minExecutionGas,\n            executionClaimExpiryDate,\n            msg.value\n        );\n    }\n\n    // ================  CAN EXECUTE EXECUTOR API ============================\n    function canExecute(\n        uint256 _executionClaimId,\n        IGelatoUserProxy _userProxy,\n        IGelatoTrigger _trigger,\n        bytes calldata _triggerPayloadWithSelector,\n        uint256 _triggerGas,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGasTotal,\n        uint256 _actionConditionsOkGas,\n        uint256 _minExecutionGas,\n        uint256 _executionClaimExpiryDate,\n        uint256 _mintingDeposit\n    )\n        external\n        view\n        returns (GelatoCoreEnums.CanExecuteCheck)\n    {\n        return _canExecute(\n            _executionClaimId,\n            _userProxy,\n            _trigger,\n            _triggerPayloadWithSelector,\n            _triggerGas,\n            _action,\n            _actionPayloadWithSelector,\n            _actionGasTotal,\n            _actionConditionsOkGas,\n            _minExecutionGas,\n            _executionClaimExpiryDate,\n            _mintingDeposit\n        );\n    }\n\n    // ================  EXECUTE SUITE ======================================\n    function execute(\n        uint256 _executionClaimId,\n        IGelatoUserProxy _userProxy,\n        IGelatoTrigger _trigger,\n        bytes calldata _triggerPayloadWithSelector,\n        uint256 _triggerGas,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGasTotal,\n        uint256 _minExecutionGas,\n        uint256 _executionClaimExpiryDate,\n        uint256 _mintingDeposit\n    )\n        external\n        returns(GelatoCoreEnums.ExecutionResult executionResult)\n    {\n        return _execute(\n            _executionClaimId,\n            _userProxy,\n            _trigger,\n            _triggerPayloadWithSelector,\n            _triggerGas,\n            _action,\n            _actionPayloadWithSelector,\n            _actionGasTotal,\n            _minExecutionGas,\n            _executionClaimExpiryDate,\n            _mintingDeposit\n        );\n    }\n\n    function cancelExecutionClaim(\n        address payable _selectedExecutor,\n        uint256 _executionClaimId,\n        IGelatoUserProxy _userProxy,\n        IGelatoTrigger _trigger,\n        bytes calldata _triggerPayloadWithSelector,\n        uint256 _triggerGas,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGasTotal,\n        uint256 _minExecutionGas,\n        uint256 _executionClaimExpiryDate,\n        uint256 _mintingDeposit\n    )\n        external\n    {\n        if (msg.sender != proxyToUser[address(_userProxy)]) {\n            require(\n                _executionClaimExpiryDate <= now && msg.sender == _selectedExecutor,\n                \"GelatoCore.cancelExecutionClaim: only selected executor post expiry\"\n            );\n        }\n        bytes32 computedExecutionClaimHash = keccak256(\n            abi.encodePacked(\n                _selectedExecutor,\n                _executionClaimId,\n                _userProxy,\n                _trigger,\n                _triggerPayloadWithSelector,\n                _triggerGas,\n                _action,\n                _actionPayloadWithSelector,\n                _actionGasTotal,\n                _minExecutionGas,\n                _executionClaimExpiryDate,\n                _mintingDeposit\n            )\n        );\n        // Checks\n        require(\n            computedExecutionClaimHash == hashedExecutionClaims[_executionClaimId],\n            \"GelatoCore.cancelExecutionClaim: hash compare failed\"\n        );\n        // Effects\n        delete userProxyByExecutionClaimId[_executionClaimId];\n        delete hashedExecutionClaims[_executionClaimId];\n        emit LogExecutionClaimCancelled(_executionClaimId, _userProxy, msg.sender);\n        // Interactions\n        msg.sender.sendValue(_mintingDeposit);\n    }\n\n    // ================  STATE READERS ======================================\n    function getCurrentExecutionClaimId()\n        external\n        view\n        returns(uint256 currentId)\n    {\n        currentId = executionClaimIds.current();\n    }\n\n    function getUserProxyWithExecutionClaimId(uint256 _executionClaimId)\n        external\n        view\n        returns(IGelatoUserProxy)\n    {\n        return userProxyByExecutionClaimId[_executionClaimId];\n    }\n\n    function getUserWithExecutionClaimId(uint256 _executionClaimId)\n        external\n        view\n        returns(address payable)\n    {\n        IGelatoUserProxy userProxy = userProxyByExecutionClaimId[_executionClaimId];\n        return proxyToUser[address(userProxy)];\n    }\n\n    function getHashedExecutionClaim(uint256 _executionClaimId)\n        external\n        view\n        returns(bytes32)\n    {\n        return hashedExecutionClaims[_executionClaimId];\n    }\n\n\n    // ================  CAN EXECUTE IMPLEMENTATION ==================================\n    function _triggerCheck(\n        IGelatoTrigger _trigger,\n        bytes memory _triggerPayloadWithSelector,\n        uint256 _triggerGas\n    )\n        internal\n        view\n        returns(GelatoCoreEnums.TriggerCheck)\n    {\n        (bool success,\n         bytes memory returndata) = address(_trigger).staticcall.gas(_triggerGas)(\n            _triggerPayloadWithSelector\n        );\n        if (!success) return GelatoCoreEnums.TriggerCheck.Reverted;\n        else {\n            bool executable = abi.decode(returndata, (bool));\n            if (!executable) return GelatoCoreEnums.TriggerCheck.NotFired;\n            return GelatoCoreEnums.TriggerCheck.Fired;\n        }\n    }\n\n    function _actionConditionsCheck(\n        IGelatoAction _action,\n        bytes memory _actionPayloadWithSelector,\n        uint256 _actionConditionsOkGas\n    )\n        internal\n        view\n        returns(GelatoCoreEnums.ActionConditionsCheck)\n    {\n        bytes memory actionConditionsOkPayloadWithSelector = abi.encodeWithSelector(\n            _action.actionConditionsOk.selector,\n            _actionPayloadWithSelector\n        );\n        (bool success,\n         bytes memory returndata) = address(_action).staticcall.gas(_actionConditionsOkGas)(\n            actionConditionsOkPayloadWithSelector\n        );\n        if (!success) return GelatoCoreEnums.ActionConditionsCheck.Reverted;\n        else {\n            bool executable = abi.decode(returndata, (bool));\n            if (!executable) return GelatoCoreEnums.ActionConditionsCheck.NotOk;\n            return GelatoCoreEnums.ActionConditionsCheck.Ok;\n        }\n    }\n\n    function _canExecute(\n        uint256 _executionClaimId,\n        IGelatoUserProxy _userProxy,\n        IGelatoTrigger _trigger,\n        bytes memory _triggerPayloadWithSelector,\n        uint256 _triggerGas,\n        IGelatoAction _action,\n        bytes memory _actionPayloadWithSelector,\n        uint256 _actionGasTotal,\n        uint256 _actionConditionsOkGas,\n        uint256 _minExecutionGas,\n        uint256 _executionClaimExpiryDate,\n        uint256 _mintingDeposit\n    )\n        internal\n        view\n        returns (GelatoCoreEnums.CanExecuteCheck)\n    {\n        // _____________ Static CHECKS __________________________________________\n        bytes32 computedExecutionClaimHash = keccak256(\n            abi.encodePacked(\n                msg.sender,  // selected? executor\n                _executionClaimId,\n                _userProxy,\n                _trigger,\n                _triggerPayloadWithSelector,\n                _triggerGas,\n                _action,\n                _actionPayloadWithSelector,\n                _actionGasTotal,\n                _minExecutionGas,\n                _executionClaimExpiryDate,\n                _mintingDeposit\n            )\n        );\n\n        if (computedExecutionClaimHash != hashedExecutionClaims[_executionClaimId])\n            return GelatoCoreEnums.CanExecuteCheck.WrongCalldataOrAlreadyDeleted;\n        else if (userProxyByExecutionClaimId[_executionClaimId] == IGelatoUserProxy(0))\n            return GelatoCoreEnums.CanExecuteCheck.NonExistantExecutionClaim;\n        else if (_executionClaimExpiryDate < now)\n            return GelatoCoreEnums.CanExecuteCheck.ExecutionClaimExpired;\n\n        // _____________ Dynamic CHECKS __________________________________________\n        GelatoCoreEnums.TriggerCheck triggerCheck = _triggerCheck(\n            _trigger,\n            _triggerPayloadWithSelector,\n            _triggerGas\n        );\n\n        bool triggerFired;\n        if (triggerCheck == GelatoCoreEnums.TriggerCheck.Fired) triggerFired = true;\n        else if (triggerCheck == GelatoCoreEnums.TriggerCheck.NotFired)\n            return GelatoCoreEnums.CanExecuteCheck.TriggerNotFired;\n        else return GelatoCoreEnums.CanExecuteCheck.TriggerReverted;\n\n        GelatoCoreEnums.ActionConditionsCheck actionCheck = _actionConditionsCheck(\n            _action,\n            _actionPayloadWithSelector,\n            _actionConditionsOkGas\n        );\n\n        if (triggerFired && (actionCheck == GelatoCoreEnums.ActionConditionsCheck.Ok))\n            return GelatoCoreEnums.CanExecuteCheck.Executable;\n        else if (actionCheck == GelatoCoreEnums.ActionConditionsCheck.NotOk)\n            return GelatoCoreEnums.CanExecuteCheck.ActionConditionsNotOk;\n        else return GelatoCoreEnums.CanExecuteCheck.ActionReverted;\n    }\n\n\n    // ================  EXECUTE IMPLEMENTATION ======================================\n    function _executeActionViaUserProxy(\n        IGelatoUserProxy _userProxy,\n        IGelatoAction _action,\n        bytes memory _actionPayloadWithSelector,\n        uint256 _actionGas\n    )\n        internal\n        returns (bool success)\n    {\n        bytes memory userProxyExecPayloadWithSelector = abi.encodeWithSelector(\n            _userProxy.executeDelegatecall.selector,\n            _action,\n            _actionPayloadWithSelector,\n            _actionGas\n        );\n        (success,) = address(_userProxy).call(userProxyExecPayloadWithSelector);\n    }\n\n\n    function _execute(\n        uint256 _executionClaimId,\n        IGelatoUserProxy _userProxy,\n        IGelatoTrigger _trigger,\n        bytes memory _triggerPayloadWithSelector,\n        uint256 _triggerGas,\n        IGelatoAction _action,\n        bytes memory _actionPayloadWithSelector,\n        uint256 _actionGasTotal,\n        uint256 _minExecutionGas,\n        uint256 _executionClaimExpiryDate,\n        uint256 _mintingDeposit\n    )\n        internal\n        returns(GelatoCoreEnums.ExecutionResult executionResult)\n    {\n        uint256 startGas = gasleft();\n        require(startGas >= _minExecutionGas, \"GelatoCore._execute: Insufficient gas sent\");\n\n        uint256 actionGas = _action.getActionGas();\n        require(actionGas != 0, \"GelatoCore._execute: 0 actionGas\");\n\n        uint256 actionConditionsOkGas = _actionGasTotal.sub(actionGas);\n        require(actionConditionsOkGas != 0, \"GelatoCore._execute: 0 actionConditionsOkGas\");\n\n        // _______ canExecute() CHECK ______________________________________________\n        GelatoCoreEnums.CanExecuteCheck canExecuteResult = _canExecute(\n            _executionClaimId,\n            _userProxy,\n            _trigger,\n            _triggerPayloadWithSelector,\n            _triggerGas,\n            _action,\n            _actionPayloadWithSelector,\n            _actionGasTotal,\n            actionConditionsOkGas,\n            _minExecutionGas,\n            _executionClaimExpiryDate,\n            _mintingDeposit\n        );\n\n        if (canExecuteResult != GelatoCoreEnums.CanExecuteCheck.Executable) {\n            emit LogCanExecuteFailed(\n                msg.sender,\n                _executionClaimId,\n                canExecuteResult\n            );\n            return GelatoCoreEnums.ExecutionResult.CanExecuteFailed;\n        }\n\n        // Above the executor pays for reverts (e.g. canExecute reverts)\n        // -------------------------------------------------------------\n        // From below the user pays for reverts (e.g. action reverts)\n\n        // EFFECTS\n        delete hashedExecutionClaims[_executionClaimId];\n        delete userProxyByExecutionClaimId[_executionClaimId];\n\n        // INTERACTIONS\n        bool success = _executeActionViaUserProxy(\n            _userProxy,\n            _action,\n            _actionPayloadWithSelector,\n            actionGas\n        );\n        if (success) executionResult = GelatoCoreEnums.ExecutionResult.Success;\n        // if execution fails, no revert, and executor still rewarded\n        else executionResult = GelatoCoreEnums.ExecutionResult.Failure;\n\n        executorBalance[msg.sender] = executorBalance[msg.sender].add(_mintingDeposit);\n\n        emit LogClaimExecutedAndDeleted(\n            msg.sender,  // executor\n            _executionClaimId,\n            _userProxy,\n            executionResult,\n            tx.gasprice,\n            // ExecutionCost Estimate: ignore fn call overhead, due to delete gas refunds\n            gasleft().sub(startGas).mul(tx.gasprice),\n            _mintingDeposit  // executorReward\n        );\n    }\n\n\n    // ================ GAS BENCHMARKING ==============================================\n    function revertLogGasTriggerCheck(\n        IGelatoTrigger _trigger,\n        bytes calldata _triggerPayloadWithSelector,\n        uint256 _triggerGas\n    )\n        external\n        view\n        returns(uint256)\n    {\n        uint256 startGas = gasleft();\n        GelatoCoreEnums.TriggerCheck triggerCheckResult = _triggerCheck(\n            _trigger,\n            _triggerPayloadWithSelector,\n            _triggerGas\n        );\n        if (triggerCheckResult == GelatoCoreEnums.TriggerCheck.Fired)\n            revert(string(abi.encodePacked(startGas - gasleft())));\n        revert(\"GelatoCore.revertLogTriggerCheckGas: Trigger didnt fire, or reverted, or wrong arguments supplied\");\n    }\n\n    function revertLogGasActionConditionsCheck(\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionConditionsOkGas\n    )\n        external\n        view\n        returns(uint256)\n    {\n        uint256 startGas = gasleft();\n        GelatoCoreEnums.ActionConditionsCheck actionCheck = _actionConditionsCheck(\n            _action,\n            _actionPayloadWithSelector,\n            _actionConditionsOkGas\n        );\n        if (actionCheck == GelatoCoreEnums.ActionConditionsCheck.Ok)\n            revert(string(abi.encodePacked(startGas - gasleft())));\n        revert(\"GelatoCore.revertLogActionConditionsCheckGas: Action Conditions NOT Ok, or reverted, or wrong arguments supplied\");\n    }\n\n\n    function revertLogGasCanExecute(\n        uint256 _executionClaimId,\n        IGelatoUserProxy _userProxy,\n        IGelatoTrigger _trigger,\n        bytes calldata _triggerPayloadWithSelector,\n        uint256 _triggerGas,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGasTotal,\n        uint256 _actionConditionsOkGas,\n        uint256 _minExecutionGas,\n        uint256 _executionClaimExpiryDate,\n        uint256 _mintingDeposit\n    )\n        external\n        view\n        returns(uint256)\n    {\n        uint256 startGas = gasleft();\n        GelatoCoreEnums.CanExecuteCheck canExecuteResult = _canExecute(\n            _executionClaimId,\n            _userProxy,\n            _trigger,\n            _triggerPayloadWithSelector,\n            _triggerGas,\n            _action,\n            _actionPayloadWithSelector,\n            _actionGasTotal,\n            _actionConditionsOkGas,\n            _minExecutionGas,\n            _executionClaimExpiryDate,\n            _mintingDeposit\n        );\n        if (canExecuteResult == GelatoCoreEnums.CanExecuteCheck.Executable)\n            revert(string(abi.encodePacked(startGas - gasleft())));\n        revert(\"GelatoCore.revertLogCanExecuteGas: CanExecuteCheck: Not Executable, or wrong arguments supplied\");\n    }\n\n    function revertLogGasActionViaGasTestUserProxy(\n        IGelatoUserProxy _gasTestUserProxy,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGas\n    )\n        external\n        gasTestProxyCheck(address(_gasTestUserProxy))\n        returns(uint256)\n    {\n        // Always reverts inside GelatoGasTestUserProxy.executeDelegateCall\n        _executeActionViaUserProxy(\n            _gasTestUserProxy,\n            _action,\n            _actionPayloadWithSelector,\n            _actionGas\n        );\n    }\n\n    function revertLogGasTestUserProxyExecute(\n        IGelatoUserProxy _userProxy,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGas\n    )\n        external\n        userProxyCheck(_userProxy)\n        returns(uint256)\n    {\n        uint256 startGas = gasleft();\n        bool success = _executeActionViaUserProxy(\n            _userProxy,\n            _action,\n            _actionPayloadWithSelector,\n            _actionGas\n        );\n        if (success) revert(string(abi.encodePacked(startGas - gasleft())));\n        revert(\"GelatoCore.revertLogGasTestUserProxyExecute: UserProxy or Action reverted, or wrong arguments supplied\");\n    }\n\n    function revertLogGasExecute(\n        uint256 _executionClaimId,\n        IGelatoUserProxy _userProxy,\n        IGelatoTrigger _trigger,\n        bytes calldata _triggerPayloadWithSelector,\n        uint256 _triggerGas,\n        IGelatoAction _action,\n        bytes calldata _actionPayloadWithSelector,\n        uint256 _actionGasTotal,\n        uint256 _minExecutionGas,\n        uint256 _executionClaimExpiryDate,\n        uint256 _mintingDeposit\n    )\n        external\n        returns(uint256)\n    {\n        uint256 startGas = gasleft();\n        GelatoCoreEnums.ExecutionResult executionResult = _execute(\n            _executionClaimId,\n            _userProxy,\n            _trigger,\n            _triggerPayloadWithSelector,\n            _triggerGas,\n            _action,\n            _actionPayloadWithSelector,\n            _actionGasTotal,\n            _minExecutionGas,\n            _executionClaimExpiryDate,\n            _mintingDeposit\n        );\n        if (executionResult == GelatoCoreEnums.ExecutionResult.Success)\n            revert(string(abi.encodePacked(startGas - gasleft())));\n        revert(\"GelatoCore.revertLogGasExecute: ExecutionResult: Failure (wrong arguments supplied?)\");\n    }\n\n}"
    },
    "contracts/gelato_core/GelatoUserProxyManager.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"./interfaces/IGelatoUserProxyManager.sol\";\nimport \"./gas_tests/GelatoGasTestUserProxyManager.sol\";\n\n/// @title GelatoUserProxyManager\n/// @notice registry and factory for GelatoUserProxies\n/// @dev find all NatSpecs inside IGelatoUserProxyManager\ncontract GelatoUserProxyManager is IGelatoUserProxyManager, GelatoGasTestUserProxyManager {\n    // non-deploy base contract\n    constructor() internal {}\n\n    uint256 internal userCount;\n    mapping(address => IGelatoUserProxy) internal userToProxy;\n    mapping(address => address payable) internal proxyToUser;\n    address payable[] internal users;\n    IGelatoUserProxy[] internal userProxies;\n\n    modifier userHasNoProxy {\n        require(\n            userToProxy[msg.sender] == IGelatoUserProxy(0),\n            \"GelatoUserProxyManager: user already has a proxy\"\n        );\n        _;\n    }\n\n    modifier userProxyCheck(IGelatoUserProxy _userProxy) {\n        require(\n            _isUserProxy(address(_userProxy)),\n            \"GelatoUserProxyManager.userProxyCheck: _userProxy not registered\"\n        );\n        _;\n    }\n\n    function createUserProxy()\n        external\n        //userHasNoProxy\n        returns(IGelatoUserProxy userProxy)\n    {\n        userProxy = new GelatoUserProxy(msg.sender);\n        userToProxy[msg.sender] = userProxy;\n        proxyToUser[address(userProxy)] = msg.sender;\n        users.push(msg.sender);\n        userProxies.push(userProxy);\n        userCount++;\n        emit LogCreateUserProxy(userProxy, msg.sender);\n    }\n\n    // ______ State Read APIs __________________\n    function getUserCount() external view returns(uint256) {return userCount;}\n\n    function getUserOfProxy(IGelatoUserProxy _proxy)\n        external\n        view\n        returns(address payable)\n    {\n        return proxyToUser[address(_proxy)];\n    }\n\n    function isUser(address _user)\n        external\n        view\n        returns(bool)\n    {\n        return _isUser(_user);\n    }\n\n    function getProxyOfUser(address _user)\n        external\n        view\n        returns(IGelatoUserProxy)\n    {\n        return userToProxy[_user];\n    }\n\n    function isUserProxy(IGelatoUserProxy _userProxy)\n        external\n        view\n        returns(bool)\n    {\n        return _isUserProxy(address(_userProxy));\n    }\n\n    function getUsers()\n        external\n        view\n        returns(address payable[] memory)\n    {\n        return users;\n    }\n\n    function getUserProxies()\n        external\n        view\n        returns(IGelatoUserProxy[] memory)\n    {\n        return userProxies;\n    }\n\n    // ______________ State Readers ______________________________________\n    function _isUser(address _user)\n        internal\n        view\n        returns(bool)\n    {\n        return userToProxy[_user] != IGelatoUserProxy(0);\n    }\n\n    function _isUserProxy(address _userProxy)\n        internal\n        view\n        returns(bool)\n    {\n        return proxyToUser[_userProxy] != address(0);\n    }\n    // =========================\n}\n"
    },
    "contracts/gelato_core/interfaces/IGelatoUserProxyManager.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"./IGelatoUserProxy.sol\";\n\n/// @title IGelatoUserProxyManager - solidity interface of GelatoUserProxyManager\n/// @notice APIs for GelatoUserProxy creation and registry.\n/// @dev all the APIs and events are implemented inside GelatoUserProxyManager\ninterface IGelatoUserProxyManager {\n    event LogCreateUserProxy(IGelatoUserProxy indexed userProxy, address indexed user);\n\n    /// @notice deploys gelato proxy for users that have no proxy yet\n    /// @dev This function should be called for users that have nothing deployed yet\n    /// @return address of the deployed GelatoUserProxy\n    function createUserProxy() external returns(IGelatoUserProxy);\n\n    // ______ State Read APIs __________________\n    function getUserCount() external view returns(uint256);\n    function getUserOfProxy(IGelatoUserProxy _proxy) external view returns(address payable);\n    function isUser(address _user) external view returns(bool);\n    function getProxyOfUser(address _user) external view returns(IGelatoUserProxy);\n    function isUserProxy(IGelatoUserProxy _userProxy) external view returns(bool);\n    function getUsers() external view returns(address payable[] memory);\n    function getUserProxies() external view returns(IGelatoUserProxy[] memory);\n    // =========================\n\n    // ============= GELATO_GAS_TEST_USER_PROXY_MANAGER ==============================\n    function createGasTestUserProxy() external returns(address gasTestUserProxy);\n\n    function getUserOfGasTestProxy(address _gasTestProxy)\n        external\n        view\n        returns(address);\n\n    function getGasTestProxyOfUser(address _user)\n        external\n        view\n        returns(address);\n}\n"
    },
    "contracts/gelato_core/GelatoCoreAccounting.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"./interfaces/IGelatoCoreAccounting.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\n\n/// @title GelatoCoreAccounting\n/// @notice APIs for GelatoCore Owner and executorClaimLifespan\n/// @dev Find all NatSpecs inside IGelatoCoreAccounting\ncontract GelatoCoreAccounting is IGelatoCoreAccounting, Ownable {\n\n    using Address for address payable;  /// for oz's sendValue method\n    using SafeMath for uint256;\n\n    // the minimum executionClaimLifespan imposed upon executors\n    uint256 internal minExecutionClaimLifespan;\n    //_____________ Gelato ExecutionClaim Economics _______________________\n    mapping(address => uint256) internal executorPrice;\n    mapping(address => uint256) internal executorClaimLifespan;\n    mapping(address => uint256) internal executorBalance;\n    //_____________ Gas values for executionClaim cost calculations _______\n    uint256 internal gelatoCoreExecGasOverhead;\n    uint256 internal userProxyExecGasOverhead;\n    uint256 internal totalExecutionGasOverhead = gelatoCoreExecGasOverhead + userProxyExecGasOverhead;\n    // =========================\n\n    // non-deploy base contract\n    constructor() internal {\n        Ownable.initialize(msg.sender);\n        minExecutionClaimLifespan = 10 minutes;\n        gelatoCoreExecGasOverhead = 100000;\n        userProxyExecGasOverhead = 40000;\n    }\n\n    // ____________ Interface for STATE MUTATIONS ________________________________________\n    //_____________ Interface for Executor _________________________________\n    // __ Executor De/Registrations _______\n    function registerExecutor(\n        uint256 _executorPrice,\n        uint256 _executorClaimLifespan\n    )\n        external\n    {\n        require(\n            _executorClaimLifespan >= minExecutionClaimLifespan,\n            \"GelatoCoreAccounting.registerExecutor: _executorClaimLifespan cannot be 0\"\n        );\n        executorPrice[msg.sender] = _executorPrice;\n        executorClaimLifespan[msg.sender] = _executorClaimLifespan;\n        emit LogRegisterExecutor(\n            msg.sender,\n            _executorPrice,\n            _executorClaimLifespan\n        );\n    }\n\n    modifier onlyRegisteredExecutors(address _executor) {\n        require(\n            executorClaimLifespan[_executor] != 0,\n            \"GelatoCoreAccounting.onlyRegisteredExecutors: failed\"\n        );\n        _;\n    }\n\n    function deregisterExecutor()\n        external\n        onlyRegisteredExecutors(msg.sender)\n    {\n        executorPrice[msg.sender] = 0;\n        executorClaimLifespan[msg.sender] = 0;\n        emit LogDeregisterExecutor(msg.sender);\n    }\n    // ===\n\n    function setExecutorPrice(uint256 _newExecutorGasPrice)\n        external\n    {\n        emit LogSetExecutorPrice(executorPrice[msg.sender], _newExecutorGasPrice);\n        executorPrice[msg.sender] = _newExecutorGasPrice;\n    }\n\n    function setExecutorClaimLifespan(uint256 _newExecutorClaimLifespan)\n        external\n    {\n        require(\n            _newExecutorClaimLifespan >= minExecutionClaimLifespan,\n            \"GelatoCoreAccounting.setExecutorClaimLifespan: failed\"\n        );\n        emit LogSetExecutorClaimLifespan(\n            executorClaimLifespan[msg.sender],\n            _newExecutorClaimLifespan\n        );\n        executorClaimLifespan[msg.sender] = _newExecutorClaimLifespan;\n    }\n\n    function withdrawExecutorBalance()\n        external\n    {\n        // Checks\n        uint256 currentExecutorBalance = executorBalance[msg.sender];\n        require(\n            currentExecutorBalance > 0,\n            \"GelatoCoreAccounting.withdrawExecutorBalance: failed\"\n        );\n        // Effects\n        executorBalance[msg.sender] = 0;\n        // Interaction\n        msg.sender.sendValue(currentExecutorBalance);\n        emit LogWithdrawExecutorBalance(msg.sender, currentExecutorBalance);\n    }\n    // =========\n\n    //_____________ Interface for GelatoCore Owner ________________________________\n    function setMinExecutionClaimLifespan(uint256 _newMinExecutionClaimLifespan)\n        onlyOwner\n        external\n    {\n        require(\n            _newMinExecutionClaimLifespan >= minExecutionClaimLifespan,\n            \"GelatoCoreAccounting.setMinExecutionClaimLifespan: threshold failed\"\n        );\n        emit LogSetMinExecutionClaimLifespan(\n            minExecutionClaimLifespan,\n            _newMinExecutionClaimLifespan\n        );\n        minExecutionClaimLifespan = _newMinExecutionClaimLifespan;\n    }\n\n    function setGelatoCoreExecGasOverhead(uint256 _newGasOverhead)\n        onlyOwner\n        external\n    {\n        emit LogSetGelatoCoreExecGasOverhead(gelatoCoreExecGasOverhead, _newGasOverhead);\n        gelatoCoreExecGasOverhead = _newGasOverhead;\n    }\n\n    function setUserProxyExecGasOverhead(uint256 _newGasOverhead)\n        onlyOwner\n        external\n    {\n        emit LogSetUserProxyExecGasOverhead(userProxyExecGasOverhead, _newGasOverhead);\n        userProxyExecGasOverhead = _newGasOverhead;\n    }\n    // =========\n    // =========================\n\n    // __________ Interface for State Reads ___________________________________\n    function getMinExecutionClaimLifespan() external view returns(uint256) {\n        return minExecutionClaimLifespan;\n    }\n\n    function getExecutorPrice(address _executor) external view returns(uint256) {\n        return executorPrice[_executor];\n    }\n\n    function getExecutorClaimLifespan(address _executor) external view returns(uint256) {\n        return executorClaimLifespan[_executor];\n    }\n\n    function getExecutorBalance(address _executor) external view returns(uint256) {\n        return executorBalance[_executor];\n    }\n\n    function getGelatoCoreExecGasOverhead() external view returns(uint256) {\n        return gelatoCoreExecGasOverhead;\n    }\n\n    function getUserProxyExecGasOverhead() external view returns(uint256) {\n        return userProxyExecGasOverhead;\n    }\n\n    function getTotalExecutionGasOverhead() external view returns(uint256) {\n        return totalExecutionGasOverhead;\n    }\n    // =========================\n\n    // _______ APIs for executionClaim pricing ______________________________________\n    function getMintingDepositPayable(\n        address _selectedExecutor,\n        IGelatoAction _action,\n        IGelatoTrigger _trigger\n    )\n        external\n        view\n        onlyRegisteredExecutors(_selectedExecutor)\n        returns(uint256 mintingDepositPayable)\n    {\n        uint256 triggerGas = _trigger.getTriggerGas();\n        uint256 actionGasTotal = _action.getActionGasTotal();\n        uint256 executionMinGas = _getMinExecutionGas(triggerGas, actionGasTotal);\n        mintingDepositPayable = executionMinGas.mul(executorPrice[_selectedExecutor]);\n    }\n\n    function getMinExecutionGas(uint256 _triggerGas, uint256 _actionGasTotal)\n        external\n        view\n        returns(uint256)\n    {\n        return _getMinExecutionGas(_triggerGas, _actionGasTotal);\n    }\n\n    function _getMinExecutionGas(uint256 _triggerGas, uint256 _actionGasTotal)\n        internal\n        view\n        returns(uint256)\n    {\n        return totalExecutionGasOverhead.add(_triggerGas).add(_actionGasTotal);\n    }\n    // =======\n}"
    },
    "contracts/gelato_core/interfaces/IGelatoCoreAccounting.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"../../actions/IGelatoAction.sol\";\n\n/// @title IGelatoCoreAccounting - solidity interface of GelatoCoreAccounting\n/// @notice APIs for GelatoCore Owners and Executors\n/// @dev all the APIs and events are implemented inside GelatoCoreAccounting\ninterface IGelatoCoreAccounting {\n\n    event LogRegisterExecutor(\n        address payable indexed executor,\n        uint256 executorPrice,\n        uint256 executorClaimLifespan\n    );\n\n    event LogDeregisterExecutor(address payable indexed executor);\n\n    event LogSetExecutorPrice(uint256 executorPrice, uint256 newExecutorPrice);\n\n    event LogSetExecutorClaimLifespan(\n        uint256 executorClaimLifespan,\n        uint256 newExecutorClaimLifespan\n    );\n\n    event LogWithdrawExecutorBalance(\n        address indexed executor,\n        uint256 withdrawAmount\n    );\n\n    event LogSetMinExecutionClaimLifespan(\n        uint256 minExecutionClaimLifespan,\n        uint256 newMinExecutionClaimLifespan\n    );\n\n    event LogSetGelatoCoreExecGasOverhead(\n        uint256 gelatoCoreExecGasOverhead,\n        uint256 _newGasOverhead\n    );\n\n    event LogSetUserProxyExecGasOverhead(\n        uint256 userProxyExecGasOverhead,\n        uint256 _newGasOverhead\n    );\n\n    /**\n     * @dev fn to register as an executorClaimLifespan\n     * @param _executorPrice the price factor the executor charges for its services\n     * @param _executorClaimLifespan the lifespan of claims minted for this executor\n     * @notice while executorPrice could be 0, executorClaimLifespan must be at least\n       what the core protocol defines as the minimum (e.g. 10 minutes).\n     * @notice NEW\n     */\n    function registerExecutor(uint256 _executorPrice, uint256 _executorClaimLifespan) external;\n\n    /**\n     * @dev fn to deregister as an executor\n     * @notice ideally this fn is called by all executors as soon as they stop\n       running their node/business. However, this behavior cannot be enforced.\n       Frontends/Minters have to monitor executors' uptime themselves, in order to\n       determine which listed executors are alive and have strong service guarantees.\n     */\n    function deregisterExecutor() external;\n\n    /**\n     * @dev fn for executors to configure their pricing of claims minted for them\n     * @param _newExecutorGasPrice the new price to be listed for the executor\n     * @notice param can be 0 for executors that operate pro bono - caution:\n        if executors set their price to 0 then they get nothing, not even gas refunds.\n     */\n    function setExecutorPrice(uint256 _newExecutorGasPrice) external;\n\n    /**\n     * @dev fn for executors to configure the lifespan of claims minted for them\n     * @param _newExecutorClaimLifespan the new lifespan to be listed for the executor\n     * @notice param cannot be 0 - use deregisterExecutor() to deregister\n     */\n    function setExecutorClaimLifespan(uint256 _newExecutorClaimLifespan) external;\n\n    /**\n     * @dev function for executors to withdraw their ETH on core\n     * @notice funds withdrawal => re-entrancy protection.\n     * @notice new: we use .sendValue instead of .transfer due to IstanbulHF\n     */\n    function withdrawExecutorBalance() external;\n\n    /**\n     * @dev setter for gelatoCore devs to impose a lower boundary on\n       executors' listed claim lifespans, to disallow bad claims\n     * @param _newMinExecutionClaimLifespan x\n     */\n    function setMinExecutionClaimLifespan(uint256 _newMinExecutionClaimLifespan) external;\n\n    /**\n     * @dev setter for GelatoCore devs to configure the protocol's executionGas calculations\n     * @param _newGasOverhead new calc for gelatoCore.execute overhead gas\n     * @notice important for _getMinExecutionGasRequirement and getMintingDepositPayable\n     */\n    function setGelatoCoreExecGasOverhead(uint256 _newGasOverhead) external;\n\n    /**\n     * @dev setter for GelatoCore devs to configure the protocol's executionGas calculations\n     * @param _newGasOverhead new calc for userProxy.execute overhead gas\n     * @notice important for _getMinExecutionGasRequirement and getMintingDepositPayable\n     */\n    function setUserProxyExecGasOverhead(uint256 _newGasOverhead) external;\n\n    /// @dev get the gelato-wide minimum executionClaim lifespan\n    /// @return the minimum executionClaim lifespan for all executors\n    function getMinExecutionClaimLifespan() external view returns(uint256);\n\n    /// @dev get an executor's price\n    /// @param _executor x\n    /// @return uint256 executor's price factor\n    function getExecutorPrice(address _executor) external view returns(uint256);\n\n    /// @dev get an executor's executionClaim lifespan\n    /// @param _executor x\n    /// @return uint256 executor's executionClaim lifespan\n    function getExecutorClaimLifespan(address _executor) external view returns(uint256);\n\n    /// @dev get the gelato-internal wei balance of an executor\n    /// @param _executor z\n    /// @return uint256 wei amount of _executor's gelato-internal deposit\n    function getExecutorBalance(address _executor) external view returns(uint256);\n\n    /// @dev getter for gelatoCoreExecGasOverhead state variable\n    /// @return uint256 gelatoCoreExecGasOverhead\n    function getGelatoCoreExecGasOverhead() external view returns(uint256);\n\n    /// @dev getter for userProxyExecGasOverhead state variable\n    /// @return uint256 userProxyExecGasOverhead\n    function getUserProxyExecGasOverhead() external view returns(uint256);\n\n    /// @dev getter for internalExecutionGas state variable\n    /// @return uint256 internalExecutionGas\n    function getTotalExecutionGasOverhead() external view returns(uint256);\n\n    /**\n     * @dev get the deposit payable for minting on gelatoCore\n     * @param _action the action contract to be executed\n     * @param _selectedExecutor the executor that should call the action\n     * @return amount of wei that needs to be deposited inside gelato for minting\n     * @notice minters (e.g. frontends) should use this API to get the msg.value\n       payable to GelatoCore's mintExecutionClaim function.\n     */\n    function getMintingDepositPayable(address _selectedExecutor, IGelatoAction _action)\n        external\n        view\n        returns(uint256 mintingDepositPayable);\n\n    /// @dev calculates gas requirements based off _actionGasTotal\n    /// @param _triggerGas the gas forwared to trigger.staticcall inside gelatoCore.execute\n    /// @param _actionGasTotal the gas forwarded with the action call\n    /// @return the minimum gas required for calls to gelatoCore.execute()\n    function getMinExecutionGas(uint256 _triggerGas, uint256 _actionGasTotal)\n        external\n        view\n        returns(uint256);\n}"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"@openzeppelin/upgrades/contracts/Initializable.sol\";\n\nimport \"../GSN/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Initializable, Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize(address sender) public initializer {\n        _owner = sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * > Note: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[50] private ______gap;\n}\n"
    },
    "@openzeppelin/upgrades/contracts/Initializable.sol": {
      "content": "pragma solidity >=0.4.24 <0.6.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"@openzeppelin/upgrades/contracts/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/drafts/Counters.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"../math/SafeMath.sol\";\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n"
    },
    "contracts/triggers/eth-util-triggers/TriggerTimestampPassed.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"../GelatoTriggersStandard.sol\";\n\ncontract TriggerTimestampPassed is GelatoTriggersStandard {\n    constructor() public {\n        triggerSelector = this.fired.selector;\n        triggerGas = 30000;\n    }\n\n    function fired(uint256 _timestamp)\n        external\n        view\n        returns(bool)\n    {\n        return _timestamp <= block.timestamp;\n    }\n\n    function getLatestTimestamp()\n        external\n        view\n        returns(uint256)\n    {\n        return block.timestamp;\n    }\n}"
    },
    "contracts/triggers/GelatoTriggersStandard.sol": {
      "content": "pragma solidity ^0.5.13;\n\nimport \"./IGelatoTrigger.sol\";\n\n/// @title GelatoTriggersStandard\n/// @dev find all the NatSpecs inside IGelatoTrigger\ncontract GelatoTriggersStandard is IGelatoTrigger {\n    constructor() internal {}\n\n    bytes4 internal triggerSelector;\n    uint256 internal triggerGas;\n\n    function getTriggerSelector() external view returns(bytes4) {return triggerSelector;}\n    function getTriggerGas() external view returns(uint256) {return triggerGas;}\n}"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}